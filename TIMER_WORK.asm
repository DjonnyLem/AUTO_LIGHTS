COUNT $372
;==========================================================
;счетчик, работающий от 0 до заданного числа
; предполагаем, что память очищена при инициализации и там нули
LDI	ZL, LOW(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА
LDI ZH,	HIGH(TIMER1)	; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА

LD R16, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА
LD R17, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА
LDI	XL, LOW(COUNT)		; @0 ЗАПИСЫВАЕМ В X АДРЕС ТАЙМЕРА
LDI XH,	HIGH(COUNT)	; @0 ЗАПИСЫВАЕМ В X АДРЕС ТАЙМЕРА

;СРАВНИВАЕМ ЗНАЧЕНИЯ ТАЙМЕРА С ЗАДАННЫМ ЧИСЛОМ, 
CPI R17, XH	;СРАВНИВАЕМ ВЕРХНЕЕ ЗНАЧЕНИЕ С 0
BRNE M3       	; не равно, значит счет уже идет
CPI R16, XL	;СРАВНИВАЕМ НИЖНЕЕ ЗНАЧЕНИЕ С 0
BRNE M3			; не равно нулю, значит счет уже идет

SUBI R16,(-1)		; + НИЖНЕЕ ЗНАЧЕНИЕ НА 1
SBCI R17,(-1)
;BRCS M3			;Перейти если перенос установлен, СЧЕТ ОКОНЧЕН

ST -Z, R16
ST -Z, R17
RJMP M4
M3:		;ОБНУЛЯЕМ СЧЕТЧИК
LDI R16, $00
LDI R16, $00
;НУЖНО ОЧИСТИТЬ ИЛИ ВЫСТАВИТЬ КОНКРЕТНЫЙ ФЛАГ ТАЙМЕРА
ST -Z, R16
ST -Z, R17
M4:
;НУЖНО ОЧИСТИТЬ ОБЩИЙ ФЛАГ ТАЙМЕРА
RJMP MAIN


;==========================================================

LDI	ZL, LOW(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА
LDI ZH,	HIGH(TIMER1)	; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА

LD R16, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА
LD R17, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА

;СРАВНИВАЕМ ЗНАЧЕНИЯ ТАЙМЕРА С FF, 
CPI R17, $FF	;СРАВНИВАЕМ ВЕРХНЕЕ ЗНАЧЕНИЕ С FF
BRNE M1       	; не равно нулю, значит счет уже идет
CPI R16, $FF	;СРАВНИВАЕМ НИЖНЕЕ ЗНАЧЕНИЕ С FF
BRNE M1			; не равно нулю, значит счет уже идет

;ИНАЧЕ ЗАПИСЫВАЕМ ПЕРВИЧНОЕ ЗНАЧЕНИЕ СЧЕТЧИКА
LDI R16, LOW(COUNT)  	;@1
LDI R17, HIGH(COUNT)	;@1

M1:
SUBI R16,1		; УМЕНЬШАЕМ НИЖНЕЕ ЗНАЧЕНИЕ НА 1
SBCI R17,0
BRCS M3			;Перейти если перенос установлен, СЧЕТ ОКОНЧЕН

ST -Z, R16
ST -Z, R17
RJMP M4
M3:		;ОБНУЛЯЕМ СЧЕТЧИК FF
LDI R16, $FF
LDI R16, $FF
;НУЖНО ОЧИСТИТЬ ИЛИ ВЫСТАВИТЬ КОНКРЕТНЫЙ ФЛАГ ТАЙМЕРА
ST -Z, R16
ST -Z, R17
M4:
;НУЖНО ОЧИСТИТЬ ОБЩИЙ ФЛАГ ТАЙМЕРА
RJMP MAIN


;INTERRUPT
	SBRS FL3, 0 

;TASKES
IN_ENGINE ;TASK1 ; ВКЛ.ДВЗ
	

;FL1-ФЛАГ ПРЕРЫВАНИЯ (ПРОИЗОШЛО ПРЕРЫВАНИЕ ПО ТАКОМУ ТО БИТУ)0 -РВ1(ENGINE), 1 -РВ2 (ГО), 3 -РВ3(РТ), 4 -РВ4(КНОПКА)
;FL2-ФЛАГ ДЕЙСТВИЯ	(ПОДТВЕРЖДЕНО ПРЕРЫВАНИЕ ПО ТАКОМУ ТО БИТУ)
;FL3-ФЛАГ ТАЙМЕРА	(ОБЩИЙ ТАЙМЕР И ТАЙМЕР КОНКРЕТНОГО СЧЕТА) 0 -ОБЩИЙ ТАЙМЕР, 1 - ТАЙМЕР 200МКС 2-ТАЙМЕР ШИМ, 3 ТАЙМЕР ВОЗРАСТ.ШИМ



MAIN:
	SBRS FL1, 0 ; Пропустить если бит ФЛАГ ПРЕРЫВАНИЙ в регистре очищен
	RCALL TASK1
	
	SBRС FL3, 0 ; Пропустить если бит ФЛАГ ТАЙМЕРА в регистре очищен
	RCALL TASK1
DELAY200:
	SBR FL3

TASK1 ;ПОДТВЕРЖДЕНИЕ ПРЕРЫВАНИЯ ЗАДЕРЖКОЙ 200МКС
;ЗАПРЕЩАЕМ ВНЕШНИЕ ПРЕРЫВАНИЯ
SBR FL3, 0; ВЫСТАВЛЯЕМ ФЛАГ
RET
;FLAG_1
;0 -ФЛАГ ВНЕШНЕГО ПРЕРЫВАНИЯ ДВЗ
;1 -ФЛАГ ВНЕШНЕГО ПРЕРЫВАНИЯ ГО
;2 -ФЛАГ ВНЕШНЕГО ПРЕРЫВАНИЯ РТ
;3 -ФЛАГ ВНЕШНЕГО ПРЕРЫВАНИЯ КН
;4
;5
;6
;7
;FLAG_2
;0 -ФЛАГ ОБЩЕГО ТАЙМЕРА
;1 -ФЛАГ ТАЙМЕРА ЗАДЕРЖКИ 200
;2 -ФЛАГ ТАЙМЕРА ЗАДЕРЖКИ 2000
;3 -ФЛАГ ТАЙМЕРА ШИМ 2000
;4
;5
;6
;7

MAIN:
SBRC FLAG_1, 0	;Пропустить если бит в регистре очищен/ 
RCALL TASK1		; ЕСЛИ БИТ УСТАНОВЛЕН, ВЫПОЛНЯЕМ ЗАДАЧУ






SBRC FLAG_1, 1	;Пропустить если бит в регистре очищен
RCALL TASK2

SBRC FLAG_1, 2	;Пропустить если бит в регистре очищен
RCALL TASK3

SBRC FLAG_1, 3	;Пропустить если бит в регистре очищен
RCALL TASK4

SBRC FLAG_2, 0	;Пропустить если бит в регистре очищен
RCALL TASK5

RJMP MAIN


TASK1:
;БЛОКИРУЕМ ВНЕШНИЕ ПРЕРЫВАНИЯ
SBRC FLAG_1, 4	;Пропустить если бит в регистре очищен
RJMP TASK6		; ЕСЛИ БИТ УСТАНОВЛЕН, ВЫПОЛНЯЕМ ЗАДАЧУ



TASK6:
;====================================================================	
PIC_STATUS:
	.BYTE	1

;====================================================================
;ОСНОВНОЕ ВНЕШНЕЕ ПРЕРЫВАНИЕ ПО РВ1
;
	CLI
;ПРЕРЫВАНИЕ ПОДТВЕРЖЕНИЯ ПОСЛЕ ЗАДЕРЖКИ? FLAG_1 BIT 4
	SBRC FLAG_1, 5 ; Пропустить если бит 4 в регистре FLAG_1 ОЧИЩЕН
	RJMP M11 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ ДЛЯ ПОДТВЕРЖДЕНИЯ ПРЕРЫВАНИЯ
	
	;ИНАЧЕ:
	;БЛОКИРУЕМ ПРЕРЫВАНИЯ
	;GIMSK– General Interrupt Mask Register Реестр масок прерываний
    LDI R16, 0<<INT0 | 0<<PCIE ;- INT0: запрос внешнего прерывания 0 разрешен;- PCIE: разрешение прерывания при смене вывода
    OUT GIMSK, R16

	;ВЫСТАВЛЯЕМ ФЛАГ ТАЙМЕРА ЗАДЕРЖКИ 200
	SBR FLAG_2, 2	;Установить бит 1 (биты) в регистре FLAG_2

	;СОХРАНЯЕМ ТЕКУЩЕЕ СОСТОЯНИЕ ПИНОВ PB1, PB2, PB3, PB4
	IN R16, PINB		;ЗАНОСИМ В РЕГИСТР TEMP ЗНАЧЕНИЯ ПОРТОВ B
	ANDI R16, 0b00011110	;МАСКОЙ ОЧИЩАЕМ ПОРТЫ В В 0, КРОМЕ РВ1, РВ2, РВ3, РВ4
 	LSL R16					; СМЕЩАЕМ ВЛЕВО ЗНАЧЕНИЯ НА 3 ЗНАКА
    LSL R16
    LSL R16
	ANDI FLAG_2 Ob00001111	;ОЧИЩАЕМ ЗНАЧЕНИЯ БИТОВ 7-4 ВО ФЛАГЕ
	OR FLAG_2,R16				;С ПОМОЩЬЮ МАСКИ ЗАПИСЫВАЕМ ВО ФЛАГ ЗНАЧЕНИЯ 7-4 С РЕГИСТРА, НЕ МЕНЯЯ ЗНАЧЕНИЯ 3-0
	STS RIC_STATUS, R16	; ПРЯМОЕ СОХРАНЕНИЕ	В ПАМЯТИ
	RJMP M12	;НА ВЫХОД ИЗ ПРЕРЫВАНИЯ
	

M11:   ;ПОДТВЕРЖДЕНИЕ ПРЕРЫВАНИЯ
	LDS R,16, RIC_STATUS	; ПРЯМАЯЗАГРУЗКА ИЗ ПАМЯТИ В R16
	IN R17, PINB		;ЗАНОСИМ В РЕГИСТР TEMP ЗНАЧЕНИЯ ПОРТОВ B
	ANDI R17, 0b00011110	;МАСКОЙ ОЧИЩАЕМ ПОРТЫ В В 0, КРОМЕ РВ1, РВ2, РВ3, РВ4
 	LSL R17					; СМЕЩАЕМ ВЛЕВО ЗНАЧЕНИЯ НА 3 ЗНАКА
    LSL R17
    LSL R17
	CP R16, R17
	BREQ M13	;Перейти если равно
	
	;ИНАЧЕ
	;РАЗРЕШАЕМ ПРЕРЫВАНИЯ
	;GIMSK– General Interrupt Mask Register Реестр масок прерываний
    LDI R16, 0<<INT0 | 1<<PCIE ;- INT0: запрос внешнего прерывания 0 разрешен;- PCIE: разрешение прерывания при смене вывода
    OUT GIMSK, R16
	RJMP M12	;НА ВЫХОД ИЗ ПРЕРЫВАНИЯ	
	
M13:
	ANDI FLAG_1 Ob00001111	;ОЧИЩАЕМ ЗНАЧЕНИЯ БИТОВ 7-4 ВО ФЛАГЕ
	OR FLAG_1,R17				;С ПОМОЩЬЮ МАСКИ ЗАПИСЫВАЕМ ВО ФЛАГ ЗНАЧЕНИЯ 7-4 С РЕГИСТРА, НЕ МЕНЯЯ ЗНАЧЕНИЯ 3-0
	;РАЗРЕШАЕМ ПРЕРЫВАНИЯ
	;GIMSK– General Interrupt Mask Register Реестр масок прерываний
    LDI R16, 0<<INT0 | 1<<PCIE ;- INT0: запрос внешнего прерывания 0 разрешен;- PCIE: разрешение прерывания при смене вывода
    OUT GIMSK, R16
	;НА ВЫХОД ИЗ ПРЕРЫВАНИЯ

M12:
	RETI



;===========================================================

ПРЕРЫВАНИЕ ПО ПЕРЕПОЛНЕНИЮ ТАЙМЕРА


	;ПРОВЕРЯЕМ ФЛАГИ ТАЙМЕРОВ
	SBRC FLAG_2, 2 ; Пропустить если бит 1 в регистре FLAG_2 ОЧИЩЕН
	RCALL M21 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ
	SBRC FLAG_2, 3 ; Пропустить если бит 2 в регистре FLAG_2 ОЧИЩЕН
	RJMP M22 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ
	SBRC FLAG_2, 4 ; Пропустить если бит 3 в регистре FLAG_2 ОЧИЩЕН
	RJMP M23 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ

	RJMP M24


M21:	;ОБРАБОТКА ЗАДЕРЖКИ 200 МКС
	LDI	ZL, LOW(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА
	LDI ZH,	HIGH(TIMER1)	; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА

	LD R16, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА
	LD R17, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА

	;СРАВНИВАЕМ ЗНАЧЕНИЯ ТАЙМЕРА С FF, 
	CPI R17, $FF	;СРАВНИВАЕМ ВЕРХНЕЕ ЗНАЧЕНИЕ С FF
	BRNE M1       	; не равно нулю, значит счет уже идет
	CPI R16, $FF	;СРАВНИВАЕМ НИЖНЕЕ ЗНАЧЕНИЕ С FF
	BRNE M1			; не равно нулю, значит счет уже идет

	;ИНАЧЕ ЗАПИСЫВАЕМ ПЕРВИЧНОЕ ЗНАЧЕНИЕ СЧЕТЧИКА
	LDI R16, LOW(COUNT)  	;@1
	LDI R17, HIGH(COUNT)	;@1
M211:
	SUBI R16,1		; УМЕНЬШАЕМ НИЖНЕЕ ЗНАЧЕНИЕ НА 1
	SBCI R17,0
	BRCS M213			;Перейти если перенос установлен, СЧЕТ ОКОНЧЕН
	ST -Z, R16
	ST -Z, R17
	RJMP M214
M213:		;ОБНУЛЯЕМ СЧЕТЧИК FF
	LDI R16, $FF
	LDI R16, $FF
	ST -Z, R16
	ST -Z, R17
	CBR FLAG_2, 2	;@2 Сбросить бит (биты) в регистре ФЛАГ ТАЙМЕРА
M214:
	RET	

M22:	;ОБРАБОТКА ЗАДЕРЖКИ 2000 МКС С ШИМ

	RET	

M23:	;ОБРАБОТКА ЗАДЕРЖКИ 2000 МКС

	RET
	
M24:	
	RETI

;============================



.MACRO TIMER_PROC ;ЗАПИСЬ TIMER_PROC @0-НОМЕР ТАЙМЕРА ЗАДЕРЖКИ, @1- НАИМЕНОВАНИЯ ЗНАЧЕНИЯ СЧЕТЧИКА, (@2)-ПОРЯДКОВЫЙ НОМЕР БИТА ФЛАГА FLAG_2 
	LDI	ZL, LOW(@0)		;(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА
	LDI ZH,	HIGH(@0)	;(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА

	LD R16, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА
	LD R17, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА

	;СРАВНИВАЕМ ЗНАЧЕНИЯ ТАЙМЕРА С FF, 
	CPI R17, $FF	;СРАВНИВАЕМ ВЕРХНЕЕ ЗНАЧЕНИЕ С FF
	BRNE TP1       	; не равно нулю, значит счет уже идет
	CPI R16, $FF	;СРАВНИВАЕМ НИЖНЕЕ ЗНАЧЕНИЕ С FF
	BRNE TP1			; не равно нулю, значит счет уже идет

	;ИНАЧЕ ЗАПИСЫВАЕМ ПЕРВИЧНОЕ ЗНАЧЕНИЕ СЧЕТЧИКА
	LDI R16, LOW(@1)	; (COUNT)  	;@1
	LDI R17, HIGH(@1)	; (COUNT)  	;@1
TP1:
	SUBI R16,1		; УМЕНЬШАЕМ НИЖНЕЕ ЗНАЧЕНИЕ НА 1
	SBCI R17,0
	BRCS TP3			;Перейти если перенос установлен, СЧЕТ ОКОНЧЕН
	ST -Z, R16
	ST -Z, R17
	RJMP TP4
TP3:		;ОБНУЛЯЕМ СЧЕТЧИК FF
	LDI R16, $FF
	LDI R16, $FF
	ST -Z, R16
	ST -Z, R17
	CBR FLAG_2, (@2); 2	;@2 Сбросить бит (биты) в регистре ФЛАГ ТАЙМЕРА
TP4:
	;RET	
.ENDMACRO



;EXEMPLE
;.LISTMAC ; РАЗВОРАЧИВАНИЕ МАКРОСА
;	TIMER_PROC  TIMER_1, COUNT, 2	



;****************************************
;*		ВАРИАНТ_2						*
;****************************************
.DEF	FLAG_1 = R21; 	РЕГИСТР ФЛАГА 
.DEF	FLAG_2 = R22; 	РЕГИСТР ФЛАГА
.EQU 	COUNT1 = 255 	;200MKS
.EQU 	COUNT2 = 255	;50LOOPS
.EQU 	COUNT3 = 255	;2000MKS
.EQU	PWM_COUNTER = 124	; ЗНАЧЕНИЕ ШИМ СИГНАЛА
.EQU	COUNT_MIN = 13	; ВОЗРАСТАЮЩЕЕ ЗНАЧЕННИЕ ШИМ ОТ MIN
.EQU	COUNT_MAX =	77	; ВОЗРАСТАЮЩЕЕ ЗНАЧЕННИЕ ШИМ ДО MAX

.EQU	VALUE_0	=	0b00000000	;НЕ РАБ
.EQU	VALUE_1	=	0b00010000	;ОСНОВНАЯ ПРОГРАММА
.EQU	VALUE_2	=	0b00100000	;НЕ РАБ
.EQU	VALUE_3	=	0b00110000	;ВЫКЛ
.EQU	VALUE_4	=	0b01000000	;НЕ РАБ
.EQU	VALUE_5	=	0b01010000	;ВЫКЛ
.EQU	VALUE_6	=	0b01100000	;НЕ РАБ
.EQU	VALUE_7	=	0b01110000	;ВЫКЛ
.EQU	VALUE_8	=	0b10000000	;НЕ РАБ
.EQU	VALUE_9	=	0b10010000	;ВЫКЛ
.EQU	VALUE_10	=	0b10100000	;НЕ РАБ
.EQU	VALUE_11	=	0b10110000	;ВЫКЛ
.EQU	VALUE_12	=	0b11000000	;НЕ РАБ
.EQU	VALUE_13	=	0b11010000	;ВЫКЛ
.EQU	VALUE_14	=	0b11100000	;НЕ РАБ
.EQU	VALUE_15	=	0b11110000	;ВЫКЛ

TIMER1:
		.BYTE	2
TIMER2:
		.BYTE	2
TIMER3:
		.BYTE	2
SAVE_STATUS:
		.BYTE	1
;========================================
;ОСНОВНОЕ ВНЕШНЕЕ ПРЕРЫВАНИЕ
	CLI
	SBR FLAG_1, 1	;Rd,K8 Установить бит 0 в регистре
	;БЛОКИРУЕМ ПРЕРЫВАНИЯ
	;GIMSK– General Interrupt Mask Register Реестр масок прерываний
    LDI R16, 0<<INT0 | 0<<PCIE ;- INT0: запрос внешнего прерывания 0 разрешен;- PCIE: разрешение прерывания при смене вывода
    OUT GIMSK, R16
	RETI

;========================================
;ПРЕРЫВАНИЕ ПО ПЕРЕПОЛНЕНИЮ ТАЙМЕРА
	CLI
	SBR FLAG_2, 1	;Rd,K8 Установить бит 0 в регистре
	RETI
;=========================================
;ОСНОВНАЯ ПРОГРАММА 
MAIN:
	;проверяем FLAG_2,0	;ФЛАГ НЕОБХОДИМОСТИ ЗАДЕРЖКИ
	SBRC FLAG_2,0	;Пропустить если бит в регистре очищен
	RCALL TIMER_COUNT

	;проверяем FLAG_1,0	;ФЛАГ НАЛИЧИЯ ПРЕРЫВАНИЯ
	SBRC FLAG_1,0	;Пропустить если бит в регистре очищен
	RCALL INTR
	
	;0
	MOV R16, FLAG_2
	ANDI R16, 0b11110000	;МАСКОЙ ОЧИЩАЕМ БИТЫ
 	CPI R16, VALUE_0		;(@0)
	BREC M1:	;(@1) Перейти если НЕ равно
	RCALL TASK_0
M1: NOP
	
	;======
.MACRO MTASK
	MOV R16, FLAG_2
	ANDI R16, 0b11110000	;МАСКОЙ ОЧИЩАЕМ БИТЫ
 	CPI R16, (@0)	; VALUE_0		;(@0)
	BREC M1:	; Перейти если НЕ равно
	RCALL (@1)	;TASK_0	;(@1)
M1: NOP
.ENDMACRO
	;======
	;1
	MTASK VALUE_1, TASK_1

	;2
	MTASK VALUE_2, TASK_2

	;3
	MTASK VALUE_3, TASK_3

	;4
	MTASK VALUE_4, TASK_4

	;5
	MTASK VALUE_5, TASK_5

	;6
	MTASK VALUE_6, TASK_6

	;7
	MTASK VALUE_7, TASK_7

	;8
	MTASK VALUE_8, TASK_8

	;9
	MTASK VALUE_9, TASK_9

	;10
	MTASK VALUE_10, TASK_10

	;11
	MTASK VALUE_11, TASK_11

	;12
	MTASK VALUE_12, TASK_12

	;13
	MTASK VALUE_13, TASK_13

	;14
	MTASK VALUE_14, TASK_14

	;15
	MTASK VALUE_15, TASK_15

	
	RJMP MAIN
	



;*******************************************
TIMER_COUNT: 						;РАБОТА ТАЙМЕРОВ
	;ПРОВЕРЯЕМ ФЛАГИ ТАЙМЕРОВ
	SBRC FLAG_2, 2 ; Пропустить если бит 1 в регистре FLAG_2 ОЧИЩЕН
	RCALL TC1 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ
	SBRC FLAG_2, 3 ; Пропустить если бит 2 в регистре FLAG_2 ОЧИЩЕН
	RJMP TC2 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ
	SBRC FLAG_2, 4 ; Пропустить если бит 3 в регистре FLAG_2 ОЧИЩЕН
	RJMP TC3 ; ЕСЛИ УСТАНОВЛЕН, ТО ПРЫГАЕМ ПО МЕТКЕ
	RJMP TC4

TC1:	;ОБРАБОТКА ЗАДЕРЖКИ 200 МКС
;	TIMER_PROC TIMER1, COUNT1, 2  ;ЗАПИСЬ TIMER_PROC @0-НОМЕР ТАЙМЕРА ЗАДЕРЖКИ, @1- НАИМЕНОВАНИЯ ЗНАЧЕНИЯ СЧЕТЧИКА, (@2)-ПОРЯДКОВЫЙ НОМЕР БИТА ФЛАГА FLAG_2 
		;======================================
	LDI	ZL, LOW(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА
	LDI ZH,	HIGH(TIMER1)		; @0 ЗАПИСЫВАЕМ В Z АДРЕС ТАЙМЕРА

	LD R16, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА
	LD R17, Z+				; ЗАПИСЫВАМ В РЕГИСТРЫ ЗНАЧЕНИЯ ИЗ ТАЙМЕРА

	;СРАВНИВАЕМ ЗНАЧЕНИЯ ТАЙМЕРА С FF, 
	CPI R17, $FF	;СРАВНИВАЕМ ВЕРХНЕЕ ЗНАЧЕНИЕ С FF
	BRNE TP1       	; не равно нулю, значит счет уже идет
	CPI R16, $FF	;СРАВНИВАЕМ НИЖНЕЕ ЗНАЧЕНИЕ С FF
	BRNE TP1			; не равно FF, значит счет уже идет

	;ИНАЧЕ ЗАПИСЫВАЕМ ПЕРВИЧНОЕ ЗНАЧЕНИЕ СЧЕТЧИКА
	LDI R16, LOW(COUNT)  	;@1
	LDI R17, HIGH(COUNT)  	;@1
TP1:
	SUBI R16,1		; УМЕНЬШАЕМ НИЖНЕЕ ЗНАЧЕНИЕ НА 1
	SBCI R17,0
	BRCS TP3			;Перейти если перенос установлен, СЧЕТ ОКОНЧЕН
	ST -Z, R16
	ST -Z, R17
	RJMP TP4
TP3:		;ОБНУЛЯЕМ СЧЕТЧИК FF
	LDI R16, $FF
	LDI R16, $FF
	ST -Z, R16
	ST -Z, R17
	CBR FLAG_2, 2	;@2 Сбросить бит (биты) в регистре ФЛАГ ТАЙМЕРА
TP4:
	;RET	

		;====================================
	RCALL INTRR_VERIFY
	RET	

TC2:	;ОБРАБОТКА ЗАДЕРЖКИ 2000 МКС С ШИМ
	;TIMER_PROC TIMER2, COUNT2, 3
	RCALL RISING_PWM
	RET	

TC3:	;ОБРАБОТКА ЗАДЕРЖКИ 2000 МКС
	;TIMER_PROC TIMER3, COUNT3, 4
	RET
	
TC4:	
	CBR FLAG_2,1	;Rd,K8 Сбросить бит 0 в регистре
	RET

;*******************************************
INTRR: 							;ПРОВЕРКА СОСТОЯНИЯ ПОРТОВ ПО ВЫСТАВЛЕНИЮ ФЛАГА ПРЕРЫВАНИЯ
	;ВЫСТАВЛЯЕМ ФЛАГ ТАЙМЕРА ЗАДЕРЖКИ 200
	SBR FLAG_2, 2	;Установить бит 1 (биты) в регистре FLAG_2
	;СОХРАНЯЕМ ТЕКУЩЕЕ СОСТОЯНИЕ ПИНОВ PB1, PB2, PB3, PB4
	IN R16, PINB		;ЗАНОСИМ В РЕГИСТР TEMP ЗНАЧЕНИЯ ПОРТОВ B
	ANDI R16, 0b00011110	;МАСКОЙ ОЧИЩАЕМ ПОРТЫ В В 0, КРОМЕ РВ1, РВ2, РВ3, РВ4
	STS SAVE_STATUS, R16	; ПРЯМОЕ СОХРАНЕНИЕ	В ПАМЯТИ
	RET

;********************************************
INTRR_VERIFY:	;ПОДТВЕРЖДЕНИЕ ПРЕРЫВАНИЯ			
	LDS R16, SAVE_STATUS	; ПРЯМАЯЗАГРУЗКА ИЗ ПАМЯТИ В R16
	IN R17, PINB		;ЗАНОСИМ В РЕГИСТР TEMP ЗНАЧЕНИЯ ПОРТОВ B
	ANDI R17, 0b00011110	;МАСКОЙ ОЧИЩАЕМ ПОРТЫ В В 0, КРОМЕ РВ1, РВ2, РВ3, РВ4
; 	LSL R17					; СМЕЩАЕМ ВЛЕВО ЗНАЧЕНИЯ НА 3 ЗНАКА
;   LSL R17
;   LSL R17
	CP R16, R17
	BREQ IV_1	;Перейти если равно
	;ИНАЧЕ
	;РАЗРЕШАЕМ ПРЕРЫВАНИЯ
	;GIMSK– General Interrupt Mask Register Реестр масок прерываний
    LDI R16, 0<<INT0 | 1<<PCIE ;- INT0: запрос внешнего прерывания 0 разрешен;- PCIE: разрешение прерывания при смене вывода
    OUT GIMSK, R16
	RJMP IV_2	;НА ВЫХОД 

IV_1:
	LSL R17					; СМЕЩАЕМ ВЛЕВО ЗНАЧЕНИЯ НА 3 ЗНАКА
    LSL R17
    LSL R17
	ANDI FLAG_1 Ob00001111	;ОЧИЩАЕМ ЗНАЧЕНИЯ БИТОВ 7-4 ВО ФЛАГЕ
	OR FLAG_1,R17				;С ПОМОЩЬЮ МАСКИ ЗАПИСЫВАЕМ ВО ФЛАГ ЗНАЧЕНИЯ 7-4 С РЕГИСТРА, НЕ МЕНЯЯ ЗНАЧЕНИЯ 3-0
	;РАЗРЕШАЕМ ПРЕРЫВАНИЯ
	;GIMSK– General Interrupt Mask Register Реестр масок прерываний
    LDI R16, 0<<INT0 | 1<<PCIE ;- INT0: запрос внешнего прерывания 0 разрешен;- PCIE: разрешение прерывания при смене вывода
    OUT GIMSK, R16
	;НА ВЫХОД

IV_2:
	CBR FLAG_1,1	;Rd,K8 Сбросить бит 0 в регистре
	RET
;****************************************************
MAIN_PWM:	;ОСНОВНАЯ ПРОГРАММА
	LDI	R16, 1<<COM0A1 | 0<<COM0A0 | 1<<WGM01 | 1<<WGM00 
	OUT	TCCR0A, R16
	RET

;****************************************************
MAIN_PWM_OFF:   ; ВЫКЛЮЧЕНИЕ ПРОГРАММЫ

	LDI	R16, 0<<COM0A1 | 0<<COM0A0 | 0<<WGM01 | 0<<WGM00 
	OUT	TCCR0A, R16
	RET

;****************************************************
RISING_PWM:
;	ПЛАВНЫЙ ШИМ (5-40%) ОТ 13 ДО 77 БИТОВ (ВСЕГО 64)
;	
; ТАЙМЕР ПО ПЕРЕПОЛНЕНИЮ СРАБАТЫВАЕТ С ЧАСТОТОЙ 0,0034 СЕК 
;(4800000 -ЧАСТОТА МК, 64-ПРЕДДЕЛИТЕЛЬ, ТАЙМЕР ПО ПЕРЕПОЛНЕНИЮ -256 ТАКТОВ: 
;1/(4800000*64)*256 = 0,0034
; ВРЕМЯ РАБОТЫ НАРОСТАЮЩЕГО ШИМ 3 СЕК. ПОЛУЧАЕМ 3СЕК / 64 ТАКТА = 0,047 СЕК ОДНО ПРИРОСТАНИЕ
; МЫ МОЖЕМ СЧИТЫВАТЬ ПО ТАЙМЕРУ ПРИРОСТАНИЕ 0,047 / 0,0034 = 14 СРАБАТЫВАНИЙ ТАЙМЕРА 1 ПРИРОСТАНИЕ


	;ПРОВЕРЯЕМ ЗНАЧЕНИЕ OCR0A НА 0
	IN 	R16, OCR0A
	CPI R16, 0
	BRNE RP1	;k Перейти если не равно
	
	;ИНАЧЕ
	LDI R16, COUNT_MIN ; ЗАНОСИМ MIN ЗНАЧЕНИЕ PWM
	OUT OCR0A, R16
	;ВЫСТАВЛЯЕМ ФЛАГ ТАЙМЕРА ЗАДЕРЖКИ PWM
	SBR FLAG_2, 3	;Установить бит 3 (биты) в регистре FLAG_2
	RJMP RP2
RP1
	IN 	R16, OCR0A
	CPI R16, COUNT_MАХ
	BREQ RP2	; Перейти если равно
	INC R16
	OUT OCR0A, R16
	

RP2:
	RET

;****************************************************
TASK_0:
	NOP
	RET

TASK_1:
	RET

TASK_2:
	RET

TASK_3:
	RET

TASK_4:
	RET

TASK_5:
	RET

TASK_6:
	RET

TASK_7:
	RET

TASK_8:
	RET

TASK_9:
	RET

TASK_10:
	RET

TASK_11:
	RET

TASK_12:
	RET

TASK_13:
	RET

TASK_14:
	RET

TASK_15:
	RET




;76543210
;||||------- ФЛАГ НАСТУПЛЕНИЯ СОБЫТИЯ "ДВИГАТЕЛЬ РАБОТАЕТ" (PB1)
;|||-------- ФЛАГ НАСТУПЛЕНИЯ СОБЫТИЯ "ВКЛ. ГАБАРИТОВ" (PB2)
;||--------- ФЛАГ НАСТУПЛЕНИЯ СОБЫТИЯ "ВКЛ. РУЧНОГО ТОРМОЗА" (PB3)
;|---------- ФЛАГ НАСТУПЛЕНИЯ СОБЫТИЯ "КНОПКА НАЖАТА" (PB4)		



.DB	0b00000000	НЕ РАБ
.DB	0b00010000	ОСНОВНАЯ ПРОГРАММА
.DB	0b00100000	НЕ РАБ
.DB	0b00110000	ВЫКЛ
.DB	0b01000000	НЕ РАБ
.DB	0b01010000	ВЫКЛ
.DB	0b01100000	НЕ РАБ
.DB	0b01110000	ВЫКЛ
.DB	0b10000000	НЕ РАБ
.DB	0b10010000	ВЫКЛ
.DB	0b10100000	НЕ РАБ
.DB	0b10110000	ВЫКЛ
.DB	0b11000000	НЕ РАБ
.DB	0b11010000	ВЫКЛ
.DB	0b11100000	НЕ РАБ
.DB	0b11110000	ВЫКЛ





